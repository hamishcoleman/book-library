#!/usr/bin/perl
use warnings;
use strict;
#
# Given an ISBN, look it up
#

#
# libxml-libxml-perl libterm-readline-perl-perl libwww-perl libtext-csv-perl libtext-csv-xs-perl
# libclass-csv-perl
# libgetopt-long-descriptive-perl
#

our $VERSION=1;

use Getopt::Long::Descriptive;
use Pod::Usage;

use FileHandle;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;

use XML::LibXML;

use Term::ReadLine;
use File::Temp qw/ tempfile /;

# FIXME - globals
my $term = new Term::ReadLine 'getisbndb';
my $parser = XML::LibXML->new();
my $ua; # for user agent
my $db={};

my ($option,$usage) = describe_options('usage: %c %o',
	[ 'man'        => 'show full man page' ],
	[ 'verbose|v+' => 'increase verbosity' ],
	[ 'quiet|q'    => 'make quiet' ],
	[ 'key=s'      => '[string] isbndb key', {default => 'CHANGEME'} ],
	[ 'log=s'      => '[file] log to this file (depricated)' ],
	[ 'db=s'       => '[file] XML database file' ],
	[ 'deftag=s'   => '[string] default tag for new books' ],
	[ 'mode'       => hidden => { one_of => [
		[ 'xml=s'      => '[string] Load this XML data' ],
		[ 'cmd=s'      => '[string] Do one command' ],
		[ 'stdin'      => 'Interactive command mode' ],
		[ 'isbn=s'     => '[isbn] Lookup book data from isbn' ],
	] } ],
	{ getopt_conf => [ qw(gnu_getopt) ] },
);
if ($option->{help}) {
	print $usage;
	exit 0;
}
if ($option->{man}) {
	pod2usage(-exitstatus => 0, -verbose => 2);
}
if ($option->{quiet}) {
	delete $option->{verbose};
};



#
# Generic http dumping routine
#
sub dump_res($$) {
	my ($desc, $res) = @_;

	if (!$res->is_success) {
		print "DUMP RES: $desc\n";
		print "Status:", $res->status_line, "\n";
		print Dumper($res);
		warn "!is_success";
	}

	if ($option->{verbose}>1) {
		print "DUMP RES: $desc\n";
		print Dumper($res);
	}
}

#
# Setup the LWP useragent
#
sub http_setup() {
	use LWP::UserAgent;
	use HTTP::Cookies;
	my $ua = LWP::UserAgent->new;
	$ua->agent("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.3) Gecko/20070310");
	$ua->cookie_jar(HTTP::Cookies->new());

	# LWP talks about RFC 2616 when it says that POST's cannot redirect
	# I have looked up the standard and it does not appear to say that
	#
	# FIXME - find out why LWP wants this in the face of the above comment
	push @{ $ua->requests_redirectable }, 'POST';

	return $ua;
}

#
# Given a well formed XML text string, return the document
#
sub isbn_xml($) {
	my ($text) = @_;
	my $res;

	my $doc = $parser->parse_string($text);
	if (!$doc) {
		warn "Not a valid XML document";
		return;
	}
	my $root = $doc->getDocumentElement();

	return $root;
}

#
# Make an isbndb.com query and return the XML result data
#
sub isbn_get($$$) {
	my ($ua,$key,$isbn) = @_;

	my $url = "http://isbndb.com/api/books.xml?access_key=$key&results=details,texts,prices,authors,keystats&index1=isbn&value1=$isbn";

	addlog('GET ',$url,"\n");
	my $req = HTTP::Request->new(GET => $url);
	my $res = $ua->request($req);
	dump_res('get',$res);

	if (!$res->is_success) {
		return;
	}
	addlog($res->content,"\n");
	$db->{_}{isbn_get}=$res->content;

	return isbn_xml($res->content);
}

#
# Given one BookData node, return a string summarising the book
#
sub isbn_xml2text1($) {
	my ($node) = @_;
	my $res;

	my $author;
	for my $j ($node->getElementsByTagName('Authors')) {
		for my $i ($node->getElementsByTagName('Person')) {
			if ($author) {
				$author.=', ';
			}
			$author.=$i->textContent();
		}
	}
	if (!$author) {
		for my $i ($node->getElementsByTagName('AuthorsText')) {
			if ($author) {
				$author.=', ';
			}
			$author.=$i->textContent();
		}
	}

	my $title;
	for my $i ($node->getElementsByTagName('Title')) {
		if ($title) {
			$title.=', ';
		}
		$title.=$i->textContent();
	}

	$res.=sprintf("%-14s %-25s %s\n",
		$node->getAttribute('isbn').';',
		$author.';', $title
	);

	return $res;
}

#
# Given a document containing BookData nodes, return a string with a one line
# summary for each node
#
sub isbn_xml2text($) {
	my ($root) = @_;
	my $res;

	for my $node ($root->getElementsByTagName('BookData')) {
		$res.=isbn_xml2text1($node);
	}
	return $res;
}

#
# Given an XML response from ISBNDB, extract the key usage stats and update
# our local cache of this
#
# <KeyStats granted="22" access_key="CHANGEME" requests="22" limit="500" />
#
sub update_keystats($) {
	my ($root) = @_;

	for my $node ($root->getElementsByTagName('KeyStats')) {
		$db->{_}{KeyStats}{granted} = $node->getAttribute('granted');
		$db->{_}{KeyStats}{requests} = $node->getAttribute('requests');
		$db->{_}{KeyStats}{limit} = $node->getAttribute('limit');
	}
}

#
# Add an entry into the running logfile (if enabled)
#
# Note: this function has been depricated and may not log much or format this
# log very well for the commandline processing mode
#
sub addlog {
	if (!$option->{log}) {
		return;
	}
	if (!$option->{logfh}) {
		$option->{logfh} = new FileHandle $option->{log},"a";
		if (!defined $option->{logfh}) {
			die "could not open $option->{log} $!\n";
		}
	}
	$option->{logfh}->print(@_);
}

#
# Update the indexes with a given BookData node
#
sub db_index_bookdata($) {
	my ($node) = @_;

	my $author;
	for my $j ($node->getElementsByTagName('Authors')) {
		for my $i ($node->getElementsByTagName('Person')) {
			if ($author) {
				$author.=', ';
			}
			$author.=$i->textContent();
		}
	}
	if (!$author) {
		for my $i ($node->getElementsByTagName('AuthorsText')) {
			if ($author) {
				$author.=', ';
			}
			$author.=$i->textContent();
		}
	}
	push @{$db->{author}{$author}},$node;

	my $tag = $node->getAttribute('tag');
	if ($tag) {
		my $isbn = $node->getAttribute('isbn');
		$db->{tag}{$tag}{$isbn}=$node;
	}
}

sub db_index_remove($) {
	my ($node) = @_;

	# FIXME - remove author index;

	my $tag = $node->getAttribute('tag');
	if ($tag) {
		my $isbn = $node->getAttribute('isbn');
		delete $db->{tag}{$tag}{$isbn};
	}
}

#
# Add a tag to a node, updating any index details as needed
#
sub tag_book($$) {
	my ($node,$tag) = @_;

	my $isbn = $node->getAttribute('isbn');
	my $oldtag = $node->getAttribute('tag');
	if ($oldtag) {
		print "Removing old tag $oldtag from $isbn\n";
		delete $db->{tag}{$oldtag}{$isbn};
	}

	if ($tag) {
		$node->setAttribute('tag',$tag);
		$db->{tag}{$tag}{$isbn}=$node;
	} else {
		$node->removeAttribute('tag');
	}
}

#
# Searches the database for the last matching node
#
sub db_getElementByAttrib($$$$) {
	my ($self,$tag,$key,$val) = @_;

	my $ret;
	for my $node ($self->getElementsByTagName($tag)) {
		if ($node->getAttribute($key) eq $val) {
			$ret=$node;
		}
	}
	return $ret;
}

# TODO -
# getElementsByAttrib - returning either list or nodelist
# get where attrib exists
# get where attrib doesnt exist

sub db_load($) {
	my ($filename) = @_;

	my $fh = new FileHandle $filename,"r";
	if (!defined $fh) {
		die "could not open $filename $!\n";
	}
	$db->{_}{doc} = $parser->parse_fh($fh);
	# TODO - warn / create an empty document on fail
	$db->{_}{isbndb} = $db->{_}{doc}->getDocumentElement();

	$db->{author} = {};

	for my $node ($db->{_}{doc}->getElementsByTagName('BookData')) {
		db_index_bookdata($node);
	}
}

sub db_save() {
	my $fh = new FileHandle $option->{db}.'.new','w';
	if (!defined $fh) {
		die "could not open $option->{db}.new $!\n";
	}
	$db->{_}{doc}->toFH($fh,1);
}

sub db_new_fake_isbn() {
	my $i = $db->{_}{last_fake_isbn} || 100;

	my $isbn = sprintf("Z%08iZ",$i);
	while(db_getElementByAttrib($db->{_}{isbndb},'BookData','isbn',$isbn)) {
		$i++;
		$isbn = sprintf("Z%08iZ",$i);
	}
	$db->{_}{last_fake_isbn} = $i;
	return $isbn;
}

sub adddb {
	if (!$option->{db}) {
		return;
	}

	my ($root) = @_;

	for my $node ($root->getElementsByTagName('BookData')) {
		# set a default tag if there is not currently one
		if ($option->{deftag} && !$node->getAttribute('tag')) {
			$node->setAttribute('tag',$option->{deftag});
		}

		my $isbn = $node->getAttribute('isbn');
		if (db_getElementByAttrib($db->{_}{isbndb},'BookData','isbn',$isbn)) {
			warn "$isbn is a duplicate";
		}

		$db->{_}{isbndb}->appendChild($node);
		$db->{_}{last_added} = $node;
		db_index_bookdata($node);
	}

	# paranoid write
	db_save();
}

sub not_found_bookdata($$) {
	my ($isbn,$text) = @_;

	my ($author,$title) = split(/;/,$text);
	if (!$title) {
		$title = $author;
		$author = 'UNKNOWN';
	} else {
		# even if we think we know it, make it easily visible
		$author = 'UNKNOWN '.$author;
	}

	my $root = XML::LibXML::Element->new('ISBNdb');
	my $node = XML::LibXML::Element->new('BookData');
	$root->appendChild($node);
	$node->setAttribute('book_id','unkid'.$isbn);
	$node->setAttribute('isbn',$isbn);
	$node->appendTextChild('Title',$title);
	$node->appendTextChild('AuthorsText',$author);
	$node->appendTextChild('Summary','');
	$node->appendTextChild('Details','');
	$node->appendTextChild('Prices','');
	$node->appendTextChild('Authors','');

	return $root;
}

sub EAN13_makecheckdigit($) {
	my ($upc) = @_;

	if (length($upc)!=12) {
		# EAN-13 without check digit is 12 chars long
		return undef;
	}

	my $csum=0;
	while ($upc) {
		$csum+= (chop $upc)*3;
		$csum+=  chop $upc;
	}
	my $modulus = 10 - ($csum%10);
	if ($modulus == 10) {
		return 0;
	} else {
		return $modulus;
	}
}

sub EAN13_checkcheckdigit($) {
	my ($upc) = @_;

	if (length($upc)!=13) {
		return undef;
	}

	my $check = chop($upc);
	return ($check == EAN13_makecheckdigit($upc));
}

sub ISBN_makecheckdigit($) {
	my ($isbn) = @_;

	if (length($isbn)!=9) {
		# ISBN-10 without check digit
		return undef;
	}

	my $csum;
	$csum+= 1* substr($isbn,0,1);
	$csum+= 2* substr($isbn,1,1);
	$csum+= 3* substr($isbn,2,1);
	$csum+= 4* substr($isbn,3,1);
	$csum+= 5* substr($isbn,4,1);
	$csum+= 6* substr($isbn,5,1);
	$csum+= 7* substr($isbn,6,1);
	$csum+= 8* substr($isbn,7,1);
	$csum+= 9* substr($isbn,8,1);
	$csum %= 11;

	if ($csum == 10) {
		return 'X';
	} else {
		return $csum;
	}
}

sub ISBN_checkcheckdigit($) {
	my ($s) = @_;

	if (length($s)!=10) {
		return undef;
	}

	my $check = chop($s);
	return ($check eq ISBN_makecheckdigit($s));
}

sub validate_isbn($) {
	my ($isbn) = @_;

	$isbn = uc $isbn;

	if (length($isbn)==9) {
		# Assume it is an old style 9 digit ISBN and prefix it with
		# a zero character before falling through
		$isbn='0'.$isbn;
	}
	if (length($isbn)==10 && ISBN_checkcheckdigit($isbn)) {
		return $isbn;
	}

	if (length($isbn)==13 && EAN13_checkcheckdigit($isbn)) {
		my $prefix = substr($isbn,0,3);
		if ($prefix eq '978' || $prefix eq '979') {
			# its bookland (978) or expansion (979)
			return $isbn;

#			# convert to 'old' ISBN format
#			my $new = substr($isbn,3);
#			chop($new);
#			my $newcheck = ISBN_makecheckdigit($new);
#			if (!defined $newcheck) {
#				warn "error in isbn check digit generation\n";
#				return;
#			}
#			return $new.$newcheck;

		}
		if ($prefix eq '977') {
			# its an ISSN, assume that this might work
			return $isbn;
		}
		warn "Not a BookLand EAN";
		return;
	}

	warn "Invalid ISBN";
	return;
}

# FIXME globals
my $cmds = {};

sub register_help($$) {
	my ($topic,$help) = @_;

	$cmds->{help}{$topic}=$help;
}
register_help('prompt','
 The command line prompt can contain several pieces of information.
 If there is a "prev" ISBN set then the prompt will contain a "P:"
 followed by the setting of the prev value.  If the number of ISBNdb.com
 queries granted is known then the prompt will contain a "G:" followed
 by the number.

Eg:
 G:16 P:9780099332107 > _

 See Also: manual, .prev
');
register_help('manual','
 When a ISBN lookup has failed, it sets the "prev" value to the ISBN
 that could not be found.  This "prev" value can also be set using the
 ".prev" and ".fake" commands and the current value will be seen on
 the prompt.

 Once a "prev" value is set, a new manual database entry can be created
 simply by typing the details in at the prompt.

 The details can be free-form text, however it is expected that they
 contain at least the Author and Title of the book.  If there is a
 semi-colon (";") in the text, this is used to indicate that the Author
 is on the left of the semi-colon.  Any remaining text is placed in the
 Title field, however this is just a convinience and the text may include
 notes or information other than the Title

Eg:
 Smith, John; Apples are nice

 See Also: .prev, .fake
');

sub register_cmd($$$) {
	my ($cmd,$func,$desc) = @_;

	$cmds->{cmd}{$cmd}{func}=$func;
	$cmds->{cmd}{$cmd}{desc}=$desc;
}

sub do_help($$) {
	my ($cmd,$topic) = @_;

	if (!$topic) {
		# print generic help
		print "\n";
		print "List of commands:\n";
		for my $i (sort keys %{$cmds->{cmd}}) {
			printf(" .%-13s %s\n",
				$i,
				$cmds->{cmd}{$i}{desc}
			);
		}
		print "\n";
		print "Use '.help topics' for a full list of all available help topics\n\n";
		return;
	}

	if ($topic eq 'topics') {
		# print list of available topics
		print "Avaliable help topics:\n\t";
		print join(', ',sort(keys(%{$cmds->{help}}))),"\n";
		return;
	}

	if ($cmds->{help}{$topic}) {
		print $cmds->{help}{$topic};
		return;
	}

	print "Help Topic not available\n";
}
register_cmd('help',\&do_help,'Provide access to help screens');

sub do_prev($$) {
	my ($cmd,$args) = @_;

	$db->{_}{not_found} = $args;
}
register_cmd('prev',\&do_prev,'Set the isbn to use for the next dummy entry');
register_help('.prev','
 Usage: .prev <string>

 This stores the string that will be used as the ISBN for the next
 manually entered book name.  Normally, searching for an ISBN which is
 not found will automatically set this, however it may be useful to
 manually set.

 See Also: .fake, prompt, manual
');

sub do_ls($$) {
	my ($cmd,$args) = @_;

	if (!$option->{db}) {
		return;
	}

	print isbn_xml2text($db->{_}{isbndb});
}
register_cmd('ls',\&do_ls,'Show current list of books');
register_help('.ls','
 Usage: .ls

 This shows the entire current list of books.  The output is sorted in
 the order that the books were entered.

Eg:

0552150738;    Dan Brown;            Angels and demons
0099496100;    Orson Scott Card;     Enders game
0099503204;    Orson Scott Card;     Speaker for the Dead

 See Also: 
');

sub do_eval($$) {
	my ($cmd,$str) = @_;

	my $res = eval $str;
	if ($@) {
		warn $@;
	} else {
		print $res,"\n";
	}
}
register_cmd('eval',\&do_eval,'Debug program using perl statements');
register_help('.eval','
 Usage: .eval <perl statement>

 This command is used to debug the internals of the running program
 using native perl commands.  It can also be used to extract adhoc reports
 from the database.

Eg:
 .eval Dumper($db);

 See Also: 
');

sub do_history($$) {
	my ($cmd,$str) = @_;

	print join("\n",$term->GetHistory());
}
register_cmd('history',\&do_history,'Show command line history');

sub do_fake($$) {
	my ($cmd,$str) = @_;

	if ($str) {
		# any args are used to build the new book
		my $root = not_found_bookdata(db_new_fake_isbn(),$str);
		process_one_bookdata($str,$root);
	} else {
		do_prev($cmd,db_new_fake_isbn());
	}
}
register_cmd('fake',\&do_fake,'Create a unique fake isbn and maybe create a new entry using it');
register_help('.fake','
 Usage: .fake
 Usage: .fake <string>

 This command will generate a new unique ISBN to be used for books
 that do not have any ISBN.  In the case with no parameters the ISBN is
 stored ready for the next manual book name entry to use.  If a string is
 provided to the command, then that is used straight away as the manual
 book name - as if it was manually typed on the next line

Eg:
 .fake Smith, John; Apples are Nice

 See Also: manual
');

sub do_show($$) {
	my ($cmd,$str) = @_;

	# Empty string means show index
	if (!$str) {
		for my $node ($db->{_}{isbndb}->getElementsByTagName('BookData')) {
			print $node->getAttribute('isbn'),' ';
		}
		print "\n";
		return;
	}

	my @list = split /\W/,$str;

	for my $isbn (@list) {
		my $node = db_getElementByAttrib($db->{_}{isbndb},'BookData','isbn',$isbn);
		if ($node) {
			print $node->toString(1),"\n";
		} elsif ($isbn eq 'last' && $db->{_}{last_added}) {
			print $db->{_}{last_added}->toString(1),"\n";
		} else {
			print "$isbn not found\n";
		}
	}
}
register_cmd('show',\&do_show,'Show the raw XML for an entry');
register_help('.show','
 Usage: .show <list of ISBNs>
 Usage: .show

 This command will dump out the raw XML contained in the database for
 a given list of ISBNs.  If it is used without any list, it will simply
 show a list of the ISBNs available.

 This command also accepts "last" as the ISBN, in which case it will show
 the most recently added entry.

Eg:
 .show 0749301317 9780099332107

 See Also:
');

sub do_remove($$) {
	my ($cmd,$isbn) = @_;

	my $node = db_getElementByAttrib($db->{_}{isbndb},'BookData','isbn',$isbn);
	if ($node) {
		$node->unbindNode();
	} elsif ($isbn eq 'last' && $db->{_}{last_added}) {
		$db->{_}{last_added}->unbindNode();
		delete $db->{_}{last_added};
	} else {
		print "$isbn not found\n";
		return
	}

	# perform a full database search and reindex to reconnect any
	# duplicate entries
	for my $node ($db->{_}{isbndb}->getElementsByTagName('BookData')) {
		if ($node->getAttribute('isbn')||'' eq $isbn) {
			db_index_bookdata($node);
		}
	}
}
register_cmd('remove',\&do_remove,'Remove an entry');
register_help('.remove','
 Usage: .remove <ISBN>

 This command will remove an ISBN from the database

 This command also accepts "last" as the ISBN, in which case it will
 remove the most recently added entry.

 WARNING: This is permanant and cannot be undone.  If you accidentally
 remove an entry you will need to restore that entry from a backup

 See Also:
');

#
# Load and replace current database
sub do_replace_db($$) {
	my ($cmd,$str) = @_;

	if ($str) {
		$option->{db} = $str;
	}
	db_load($option->{db});
}
register_cmd('replace_db',\&do_replace_db,'Load a new database, replacing the current one');
register_help('.replace_db','
 Usage: .replace_db
 Usage: .replace_db <filename>

 This will replace the entire current database with a new one loaded
 from disk.  If there is no filename provided, this will reload the
 original file, otherwise it changes to the specified file.

 WARNING: This will wipe out any unsaved changes

 See Also:
');

sub do_tag($$) {
	my ($cmd) = shift;
	$_ = shift;

	my @list = split;
	my $tag = shift @list;

	# no tag means show tags
	if (!$tag) {
		print(join("\n",sort(keys(%{$db->{tag}}))),"\n");
		return;
	}

	# no list means show tagged books
	if (!scalar @list) {
		for my $node ($db->{_}{isbndb}->getElementsByTagName('BookData')) {
			if (($node->getAttribute('tag')||'') =~ $tag) {
				print isbn_xml2text1($node);
			}
		}
		return;
	}

	# allow removal of tags
	if ($tag eq "''") {
		$tag='';
	}

	print "Tagging books\n";
	for my $i (@list) {
		my $node = db_getElementByAttrib($db->{_}{isbndb},'BookData','isbn',$i);
		if ($node) {
			tag_book($node,$tag);
		} elsif ($i eq 'last' && $db->{_}{last_added}) {
			tag_book($db->{_}{last_added},$tag);
		} else {
			print "$i not found\n";
		}
	}
}
register_cmd('tag',\&do_tag,'Set or show tags on entries');
register_help('.tag','
 Usage: .tag
 Usage: .tag <tag>
 Usage: .tag <tag> <list of ISBNs>

 This command is used for showing and managing tags.  When run with no
 parameters, it will show a list of all currently used tags.  When run
 with a tag name, it will list the books that have been tagged with
 that tag.  When run with a tag name and a list of ISBNs, it will tag
 all those ISBNs with the given tag.

 This command also accepts "last" as the ISBN, in which case it will
 tag the most recently added entry.

 NOTE: an entry can only have one tag - setting a new tag will remove
 the original tag

Eg:
 .tag chuck
 .tag shelf4 0330231669 058604356X

 See Also: .default_tag
');

sub do_default_tag($$) {
	my ($cmd,$tag) = @_;

	$option->{deftag}=$tag;
}
register_cmd('default_tag',\&do_default_tag,'Set the default tag for new entries');
register_help('.default_tag','
 Usage: .default_tag <tag>

 This command sets the default tag to set on all new entries.


 See Also: .tag
');

sub do_edit_helper($) {
	my ($node) = @_;

	my ($fh, $filename) = tempfile();
	binmode $fh, ":utf8";
	my $string = $node->toString(1);
	$fh->write($string);

	my $editor = $ENV{'EDITOR'} || 'editor';
	system("$editor $filename");

	$fh->seek(0,0);
	my $newstring = join('',$fh->getlines);
	unlink($filename);
	$fh->close();

	if ($newstring eq $string) {
		print "Entry unchanged\n";
		return;
	}

	# Save a copy for debugging;
	$db->{_}{edit}=$newstring;

	my $newnode = eval '$parser->parse_balanced_chunk($newstring);';
	if ($@) {
		print "\n";
		print $@;
		return;
	}

	db_index_remove($node);
	$node = $node->replaceNode($newnode);
	db_index_bookdata($node);
}

#
# TODO - handle editing multiple nodes better
# - perhaps construct a list of nodes, dump all to text and
#   delete the originals and append the new ?

sub do_edit($$) {
	my ($cmd,$str) = @_;

	my @list = split /\W/,$str;

	for my $isbn (@list) {
		my $node = db_getElementByAttrib($db->{_}{isbndb},'BookData','isbn',$isbn);
		if ($node) {
			do_edit_helper($node);
		} elsif ($isbn eq 'last' && $db->{_}{last_added}) {
			do_edit_helper($db->{_}{last_added});
		} else {
			print "$isbn not found\n";
		}
	}
}
register_cmd('edit',\&do_edit,'Edit the raw XML for an entry');

sub do_searchisbndb($$) {
	my ($cmd,$text) = @_;

	# FIXME - uses global $ua var

	# TODO - get multiple pages

	my $url = "http://isbndb.com/api/books.xml?access_key=$option->{key}&results=details,authors,keystats&index1=combined&value1=$text";

	my $req = HTTP::Request->new(GET => $url);
	my $res = $ua->request($req);
	dump_res('searchisbndb',$res);

	if (!$res->is_success) {
		return;
	}
	$db->{_}{isbn_search}=$res->content;

	my $xml = isbn_xml($res->content);
	update_keystats($xml);
	print isbn_xml2text($xml);
}
register_cmd('searchisbndb',\&do_searchisbndb,'Perform a title and author text search');
#register_help('.searchisbndb','');

sub do_librarything_export($$) {
	my ($cmd,$text) = @_;

	# TODO - use Text::CSV_XS as in the import routine
	use Class::CSV;

	my $csv = Class::CSV->new(
		fields => [qw/title author date isbn publication tags rating review entrydate/],
	);

	$csv->add_line([
		"'TITLE'", "'AUTHOR (last, first)'", "'DATE'", "'ISBN'",
		"'PUBLICATION INFO'", "'TAGS'", "'RATING'", "'REVIEW'",
		"'ENTRY DATE'"
	]);


	for my $node ($db->{_}{isbndb}->getElementsByTagName('BookData')) {
		my %l;

		my $title;
		for my $i ($node->getElementsByTagName('Title')) {
			if ($title) {
				$title.=', ';
			}
			$title.=$i->textContent();
		}
		$l{title}=$title;

		my $author;
		for my $j ($node->getElementsByTagName('Authors')) {
			for my $i ($node->getElementsByTagName('Person')) {
				if ($author) {
					$author.='; ';
				}
				$author.=$i->textContent();
			}
		}
		if (!$author) {
			for my $i ($node->getElementsByTagName('AuthorsText')) {
				if ($author) {
					$author.=', ';
				}
				$author.=$i->textContent();
			}
		}
		$l{author}=$author;

		$l{isbn} = $node->getAttribute('isbn');

		my $publication;
		for my $i ($node->getElementsByTagName('PublisherText')) {
			if ($publication) {
				$publication.=', ';
			}
			$publication.=$i->textContent();
		}
		for my $i ($node->getElementsByTagName('Details')) {
			my $edition = $i->getAttribute('edition_info');
			if ($edition) {
				if ($publication) {
					$publication.=', ';
				}
				$publication.=$edition;
				if ($edition =~ m/; (\d{4}(-\d\d-\d\d)?)/) {
					$l{date} = $1;
				}
			}

			my $phys = $i->getAttribute('physical_description_text');
			if ($phys) {
				if ($publication) {
					$publication.=', ';
				}
				$publication.=$phys;
			}
		}
		$l{publication} = $publication;

		$l{tags} = $node->getAttribute('tag');
#		$l{rating} =
#		$l{review} =
#		$l{entrydate} =

		$csv->add_line(\%l);
#'TITLE',"'AUTHOR (last, first)'",'DATE','ISBN',"'PUBLICATION INFO'",'TAGS','RATING','REVIEW',"'ENTRY DATE'"
#"A Gentle Madness: Bibliophiles, Bibliomanes, and the Eternal Passion for Books","Basbanes, Nicholas A.",1999,0805061762,"Holt Paperbacks (1999), Paperback, 668 pages",,0,,"2008-06-17 12:03:21"
	}

	$csv->print();
}
register_cmd('librarything_export',\&do_librarything_export,'Export the database in librarything csv format');

sub do_librarything_import($$) {
	my ($cmd,$filename) = @_;

	if (!$filename) {
		print "Need to specify a filename\n";
		return;
	}

	use Text::CSV_XS;

	my $fh = new FileHandle $filename,"r";
	if (!defined $fh) {
		warn "could not open $filename $!\n";
		return;
	}
	binmode $fh, ":utf8";

	my $csv = Text::CSV_XS->new ({ binary => 1, eol => $/ });
	$csv->column_names([qw/title authorfl author date lcc dcc isbn publication rating review entrydate copies subjects tags/]);

#'TITLE',"'AUTHOR (first, last)'","'AUTHOR (last, first)'",'DATE','LCC','DDC','ISBN',"'PUBLICATION INFO'",'RATING','REVIEW',"'ENTRY DATE'",'COPIES','SUBJECTS','TAGS'

	# first line should be the titles
	$csv->getline_hr($fh);

	while (my $row = $csv->getline_hr($fh)) {
		my $root = XML::LibXML::Element->new('ISBNdb');
		my $node = XML::LibXML::Element->new('BookData');

		my $isbn = $row->{isbn};

		# librarything wraps their isbns with square brackets
		$isbn =~ s/^\[//;
		$isbn =~ s/\]$//;

		# no isbn recorded..
		if (!$isbn) {
			$isbn = db_new_fake_isbn();
		}

		$root->appendChild($node);
		$node->setAttribute('book_id','isbn'.$isbn);

		$node->appendTextChild('Title',$row->{title});
		$node->appendTextChild('AuthorsText',$row->{author});
		$node->appendTextChild('Authors','');	# FIXME - construct
		# date
		# lcc
		# dcc
		$node->setAttribute('isbn',$isbn);
		# publication
		$node->appendTextChild('Details','');	# FIXME - contstruct
		# rating
		# review
		# entrydate
		# copies
		$node->appendTextChild('Summary',$row->{subjects});	# FIXME UTF-8 annoys this
		$node->setAttribute('tag',$row->{tags});

		$node->appendTextChild('Prices','');
		adddb($root);
	}
}
register_cmd('librarything_import',\&do_librarything_import,'Import the database from librarything csv format');


sub process_one_bookdata($$) {
	my ($search,$root) = @_;

	my $text = isbn_xml2text($root);
	if (!defined $text) {
		$text = "NOT FOUND\n";
		# TODO - check that $text is a valid ISBN before setting it
		$db->{_}{not_found} = $_;
	} else {
		delete $db->{_}{not_found};
	}
	print $text;
	addlog("T $search\t$text");
	adddb($root);
	update_keystats($root);
}

sub do_one_cmdline($$) {
	my ($ua) = shift;
	$_ = shift;
	chomp;

	# ISBN's start with numbers
	if ($_ =~ m/^[0-9]/) {


		# remove spaces and other strange chars
		s/ +//g;
		s/-+//g;

		# for keypad entry, turn a "*" into a "X"
		s/\*$/X/;
		
		# try and validate it and beep if there is an error
		if (!($_ = validate_isbn($_))) {
			# TODO - should I remove the warns from
			# validate_isbn and output the message here?
			# TODO - add a method of forcing text to validate
			print '';
			return;
		}

		print "$_\t";

		my $root = isbn_get($ua,$option->{key},$_);
		if ($root) {
			process_one_bookdata($_,$root);
		} else {
			print "ERROR: getting isbn details\n";
			# TODO: check if it is a EAN13 but not bookland
			# and ask the user to type in an ISBN
		}
		return;
	}

	# cmdline
	if ($_ =~ m/^\.(\w+) ?(.*)/) {
		if ($cmds->{cmd}{$1}){
			$cmds->{cmd}{$1}{func}($1,$2);
			return;
		}
		print "Invalid Command.  Use '.help' for more help\n";
		return;
	}

	# some kind of manual text entry
	if ($_ && $db->{_}{not_found}) {
		addlog("GET MANUAL\n");	# a record separator
		my $root = not_found_bookdata($db->{_}{not_found},$_);
		process_one_bookdata($db->{_}{not_found},$root);
		addlog("M $_\n");
		delete $db->{_}{not_found};

		return;
	}

	if ($_) {
		print "Enter ISBN or use '.help' for more help\n";
	}
}

sub do_repl($) {
	my ($ua) = @_;

	# Turn on autoflush so we can see progressive output
	$| = 1;

	$term->ornaments(0);
	my $attribs = $term->Attribs;
	$attribs->{completion_entry_function} =
		$attribs->{list_completion_function};

	for my $i (keys %{$cmds->{cmd}}) {
		push @{$attribs->{completion_word}}, '.'.$i;
	}

	my $prompt = "> ";
	while ( defined ($_ = $term->readline($prompt)) ) {
		do_one_cmdline($ua,$_);
		#$term->addhistory($_) if /\S/;

		$prompt = "";
		if ($db->{_}{KeyStats}{granted}) {
			$prompt .= 'G:'.$db->{_}{KeyStats}{granted}.' ';
		}
		if ($db->{_}{not_found}) {
			$prompt .= 'P:'.$db->{_}{not_found}.' ';
		}
		$prompt .= '> ';
	}
}

if ( !defined($option->{key})){
	die "must specify access key";
}

if ($option->{db}) {
	db_load($option->{db});
}

binmode STDOUT, ":utf8";

$ua = http_setup();

if ($option->{xml}) {
	my $xml = $option->{xml};
	addlog("GET from string\n");	# a record separator
	addlog($xml,"\n");

	my $root = isbn_xml($xml);
	if ($root) {
		process_one_bookdata('xml',$root);
	} else {
		print "ERROR: getting isbn details\n";
	}
	print "G:",$db->{_}{KeyStats}{granted};
	print "\n";
} elsif ($option->{cmd}) {
	do_one_cmdline($ua,$option->{cmd});
} elsif ($option->{stdin}) {
	do_repl($ua);
} elsif ($option->{isbn}) {
	my $root = isbn_get($ua,$option->{key},$option->{isbn});
	if ($root) {
		process_one_bookdata($option->{isbn},$root);
	} else {
		print "ERROR: getting isbn details\n";
	}
	print "G:",$db->{_}{KeyStats}{granted};
	print "\n";
} else {
	die "Must specify isbn";
}

if ($option->{db}) {
	# FIXME - do nothing if data has not changed
	db_save();
	rename($option->{db},$option->{db}.'.old');
	rename($option->{db}.'.new',$option->{db});
}

__END__
